1.tomcat
	bin,配置成Path中的路径，可以更简单的使用
	startup.sh
	shutdown.sh
	catalina.sh stop/start/run
2.web程序的目录结构
	ROOT
		WEB-INF
			classes
				编译后的.class文件
				一些必要的配置文件
			lib
			tld
				存放自定义标签的tld
			tags
				存放一些简单的tag文件,自己定义的简单tag；它和上面的tld其实差不多，不过这个没有用到类
			web.xml
		jsp页面
		js
		css等	
	
4.Servlet容器：可以用来运行Servlet,Filter,Listener,Tag,JSP等；
		
5.Servlet
	由Servlet容器创建，创建后是单例的；
	Servlet容器负责Servlet和客户之间的通信以及调用Servlet的生命周期方法；
	loadOnStart>=0参数;设置Servlet的创建时机，如果设置了，那么在启动容器的时候就会实例化Servlet
	Servlet生命周期（都是Servlet容器调用的）:
		1)构造器：MyServlet1.MyServlet1();
		2)init():MyServlet1.init();
		3)service:MyServlet1.service();
		4)destory:MyServlet1.destory();
	servlet中的mapping--url-pattern:同一个Servlet可以被映射到多个路径；映射名称不能有重复的，但如果都可以匹配上，则选择比较精准的那个		
		第一种，精确匹配:/abc
		第二种，使用通配符*，有二种形式,其它的都不行
			/abc/*:
			*.jsp:
6.ServletConfig
	1)接收外部的参数，局部参数，只能在Servlet中使用：
		<init-param>
			<param-name></param-name>
			<param-value></param-value>
		</init-param>
	2)可以获取ServletContext:
	
7.ServletContext,对应的是当前的应用,
	1)可以通过ServletConfig.getServletContext()获取;
	2)可以认为ServletContext是当前Web应用的管家
	3)可以获取到当前应用的配置信息
		a.getInitParameter，获取全局配置信息
			<context-param>
				<param-name>name</param-name>
				<param-name>jiege</param-name>
			</context-param>
		b.getRealPath("/");项目运行的路径
		c.getContextPath();应用的名称
		d.setAttribute(key,value);
8.HTTP请求消息
	请求的结构：
		一个请求行、若干个消息头、实体内容，其中一些消息头和实体内容都是可选的，消息头和实体内容之间要用空行隔开
		GET /books/java.html HTTP/1.1 #请求行
		Accept:*/*
		Accept-Language:en-us
		Connection:keep-alive
		#需要有这一个空行
		xxxxxx
		
	GET/POST
	get方式，它的数据是跟在url地址之后的,但是大小不能操作了1k
	post,传送的数据量无限制呀
	
	消息头:
		Accept:text/html,image/*#告诉服务器它所支持的数据类型
		Accept-Charset:告诉服务器客户端的编码
		Accept-Encoding:支持的压缩方式
		Accept-Language:客户端支持的文字格式
		Host:
		If-Modified-Since:资源的缓存时间
		Referer:他是从那个资源访问服务器的,用于防盗的
		User-Agent:
		Cookie:
		Connection:
		Date:
		
	响应结构：
	一个状态行，若干个响应头、响应体；
		HTTP/1.1 200 OK
		Server:
		Date:
		Content-Length:
		Content-Type:
		Cache-control:private
		range:
		
		<Html>
			<body>
			......
		
9.HttpServletRequest
	1)获取求情参数信息
		getParameter(name);
	2)获取请求地址
		getRequestURI();
		getMethod();
	SingleThreadModel,标记接口;其实并没有解决线程安全问题
	
	
	
10.HttpServletResponse
	1)getWriter();
	1)getOutputStream();
	2)setHeader();	
	2)setContentType("");响应类型，可以从tomcat中的web.xml中查找
	
	
JSP(Java Server Page):它最终会被编译成一个class文件,它其实是一个Servlet文件
	9大内置对象:详看HttpJspBase类的子类,也就是jsp页面解析后的.java文件,一般在work目录下
		request,
		response,
		config,
		application,
		session,
		page,
		pageContext,
		out,
		exception:只有主动声明了才可以用<%@ page isErrorPage="true" %>
		
JSP元素:
	JSP脚本片段：
	定义:
		<%  
			Date date = new Date();
			out.print(date);
		%>
	输出:
		<%= date%>=out.print(date);
	JSP中声明方法(很少使用):
		<%!
			public void abc(int i,int j){
				return i + j;
			}
		%>
	JSP中的注释(不会在编译的文件中出现；其它的注释会出现在代码中，会成为累赘):
		<%-- safs  --%>
		
11.和属性相关的方法，setAttribute(name,object);
					 getAttribute(name);
					 removeAttribute(name);
	以下都有这些方法，但代表的范围不一样
	pageContext,当前JSP页面有效
	request,当前这个请求里面都有效
	seesion,当前会话都有效(浏览器打开到关闭被称为一次回话[会话有效期间,会话是有时效的])
	application，当前项目有效
	
12.请求的重定向与请求的转发
	
	请求的转发（浏览器上的地址不会改变）:
		request.getRequestDispatcher(path).forword(req,res)
	
	请求的重定向（浏览器上的地址会改变）:
		response.sendRedirect(location)
		
	区别：
		1）浏览地址栏的改变
		2）转发仅仅发送了一次请求（用的同一个request）；
		   而重定向发送了两次请求（用的是不同的request）;
		3)转发只能在本项目内部（内部资源）；重定向可以到任何的资源；
		4)forword:本web应用的根目录http://www.loujie.com/key
		  redirect:本web应用站点的根目录:http://www.loujie.com
	
13:JSP指令，是为JSP引擎设计的，不会产生任何可见的输出
	1）<%@ page 属性="值" %>
		作用范围是整个页面
		有一下属性:
			language="java"
			extends="package.class"
	2）<%@ include 属性="值"  %>
		静态引入，源码级包含
		在编译的时候，将包含的内容全部的引入到现有的Servlet中；
	3）<%@ taglib 属性="值" %>
	
14：JSP标签，
	1)<jsp:include page="" />
		动态引入，没有源码的引用（两个页面没有太大的瓜分，但共用的request,response）
	2)<jsp:forward page="" />
		相当于在页面上做了一个转发;request.getRequestDispatcher("").forward(req,res);
	3)上面都可以搭配
		<jsp:param>标签用
		<jsp:include>
			<jsp:param></jsp:param>
			<jsp:param></jsp:param>
		</jsp:include>
		可以通过request.getParameter("name")获取；
	4)
		
		
15:关于中文乱码，
	1.在JSP页面上输入中文的编码是UTF-8
		<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"  %>
		
	2.获取请求中的中文参数值:默认参数在传输过程中为ISO-8859-1
		a)对于POST请求:
			request.setCharacterEncoding("utf-8");
		b)对于GET请求:
			可以手动的转化，
			也可以去小修改tomcat的编码:
				URIEncoding="utf-8"或者设置
				useBodyEncodingForURI=true,让和POST的编码保持一致，也就是request.setCharacterEncoding("utf-8")生效了
				
				
16:MVC的设计模式
	Model-View-Controller
	
	
17.Cookie

	因为Http是一个无状态的协议
	
	cookie===点心
	
	cookie机制采用的是在客户端保持HTTP状态信息的方案
	
	Cookie是浏览器访问WEB服务器的某个资源时，由WEb服务器
	在HTTP响应消息头中附带传送给浏览器的一个小文本文件
	
	一旦WEB浏览器保存了某个Cookie,那么在以后的请求WEb服务器中
	都会在HTTP请求头中将这个cookies回传给WEB服务器
	
	//1.创建一个Cookie对象
		Cookie cookie = new Cookie("jiege","hao");
	
		Cookie cookie2 = new Cookie("jiege2","hao2");
		
	//2.调用response的一个方法 把Cookie传递给客户端
		response.addCookie(cookie);
		response.addCookie(cookie2);
		
	//3.
	cookie2.setDomain("");
		cookie2.setMaxAge(0);//设置有效时长:
									默认不设置，是会话级别的；
									设置为0,是立马删除它；
									大于0,就是有效时长了,单位为秒
		cookie2.setPath(uri);//Cookie的作用范围
			
		cookie2.setHttpOnly(isHttpOnly);
		
		
18：HttpSession
	session概念：它是浏览器和服务器端的一次会话；
	session的声明周期，什么时候创建，什么时候销毁；
		
	一个页面，到另一个页面，通过了Servlet
						在Servlet中将东西存放到Session中
			将东西写入，经过Servlet跳转到页面
						在Servlet中将东西放入Session中
					在页面显示东西
					
	JavaWEB中的相对路径及绝对路径:
		一般在Servlet及JSP跳转的时候会出现；请注意
	
	重复提交：
		需要用到Session
		
19.JavaBean，需要一个无参构造函数
	BeanUtils
	
	
	
	

20.EL表达式
	取值，从JSP中的域，page,request,session,application;范围从小到大
	pageScope,requestScope,sessionScope,applicationScope,param(从request.getParameter()中取参)
	
21.自定义标签
	主要是为了规范化，代替java代码片段；
	自定义标签实现了JspTag接口；
	
	自定义标签:
		实现SimpleTag接口或继承SimpleTagSupport
			调用的方法有:
				HelloTag.setJspContext(JspContext)
				HelloTag.doTag()
			JspContext=pageContext
			
			当有标签体的时候,会调用方法setJspBody(JspFragment)
			JspFragment,它可以获取JspContext
				invoke(Writer)方法;将标签体里面的内容输入到Writer流中
					如果writer==null，则输入到out里面；
			empty:没有标签体；
			scriptless:可以包含EL表达式及其它，但不可以包含java片段脚本；
			tagdependent:里面的表达式由标签本身解决
			
			当带有父标签的：
				暂时没有用，
	
	
	例子:
		<my:hello value="${list}" var="item">
			${item.id }--${item.name }---${item.age }
		</my:hello>
		
		private List<Map<String, Object>> value;
		private String var;
		@Override
		public void doTag() throws JspException, IOException {
			if (value != null && value.size() > 0) {
				for (Map<String, Object> itemMap : value) {
					this.getJspContext().setAttribute(var, itemMap);
					this.getJspBody().invoke(null);
				}
			}
		}
		
		  <!-- 定义一个标签 -->
		  <tag>
			<description>Hello tag,this is first tag</description>
			<!-- name,tag-class,body-content必可少 -->
			<name>hello</name>
			<tag-class>com.loujie.tag.HelloTag</tag-class>
			<!-- 标签体内容类型 -->
			<body-content>scriptless</body-content>
			
			<!-- 属性,对应的类型写一个这样的属性,并增加getter/setter方法 -->
			<attribute>
				<!-- 属性名称 -->
				<name>value</name>
				<!-- 是否必须 -->
				<required>false</required>
				<!-- runtime expression value ,当前的属性是否可以接受运行时表达式 -->
				<rtexprvalue>true</rtexprvalue>
			</attribute>
			
			<attribute>
				<name>var</name>
				<required>false</required>
				<rtexprvalue>false</rtexprvalue>
			</attribute>
		  </tag>
		
EL自定义函数:
	直接调用一个类中的静态方法:
		  <function>
			<name>toUpper</name>
			<function-class>com.loujie.utils.WebUtils</function-class>
			<function-signature>java.lang.String toUpper(java.lang.String)</function-signature>
			<example>${my:toUpper(value)}</example>
		  </function>
		  
也可以自己定一个tag文件,变成tag标签,上网查询吧
	<%@tag language="java" pageEncoding="UTF-8"%>

	<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

	<%-- 1.定义是否有标签内容 --%>
	<%@ tag body-content="empty" %>

	<%-- 2.定义有那些属性 --%>
	<%@attribute name="items" required="false" rtexprvalue="true" type="java.util.List" %>
	<%@attribute name="var" required="false" rtexprvalue="false" type="java.lang.String" %>

	var:${var}
		
		
		
22.Filter,
	Filter的基本功能是对Servlet容器调用Servlet的过程进行拦截，
	从而在Servlet进行响应处理的前后实现一些特殊的功能；
	Filter程序可以拦截Jsp,Servlet,静态资源等；
	Filter其实是一个类似于Servlet的东西，也有init,do,destory方法；
	
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		System.out.println("HelloFilter.doFilter()");
		chain.doFilter(request, response);
	}
	
	FilterChain,Filter 链，多个Filter形成了链,doFilter方法是传递个下一个Filter，如果当前的是最后一个，那么，就是传递给了目标；
	
	Filter的执行顺兴，是在Web.xml中的定义顺序；如果使用了@WebFilter的话，就根据名称的命名来启动(filter1_ClassName,filter2_ClassName)
	
	dispatcherTypes={DispatcherType.FORWARD,DispatcherType.REQUEST,DispatcherType.ERROR,DispatcherType.include,ASYNC}
	通过控制该值，可以控制一些请求是否被拦截（也就是要拦截那种大的累心）
	
	Filter的url-patten与Servlet的一样
	
	HttpServletRequestWrapper，它是一个实现了所有ServletRequest方法的类ServletRequest类，相当于拷贝了传递过去的request,但是可以修改里面获取的值，相当于外面包裹了一层一样的外壳
	
	
23.监听器
	专门用于对域对象身上发生的事件或状态改变的一种监听，
	
	对域ServletContext,HttpSession,ServetRequest的创建进行监听；	
	可以进一步了解，request,seesion,application域
	ServletContextListener,
	ServletRequestListener,
	HttpSessionListener,
	都是有一个创建事件，一个销毁事件；

	对域对象属性变化的监听，
	request,seesion,application的attribute的方法调用
	ServletContextAttributeListener,
	ServletRequestAttributeListener,
	HttpSessionAttributeListener,
	
24.文件上传
	首先是POST方式提交,然后是以二进制的方式提交的,需要设置enctype的值
	method="post" enctype="multipart/form-data"
	用的了request.getInputStream();
	
	利用fileupload包来处理；
	//1.声明ServletFileUpload	
	DiskFileItemFactory factory = new DiskFileItemFactory();
	//内存最多512Kb
	factory.setSizeThreshold(1024 * 512);
	File file = new File(this.getClass().getResource("/").getPath());

	factory.setRepository(file);
	ServletFileUpload sfuFileUpload = new ServletFileUpload(factory);
	//文件最大5Mb
	sfuFileUpload.setFileSizeMax(1024 * 1024 * 5);
	//2.获取请求的文件列表及参数列表
	List<FileItem> fileLists = sfuFileUpload.parseRequest(request);
	if (fileLists != null && fileLists.size() > 0) {
		for (FileItem item : fileLists) {
			//表单域字段
			if (item.isFormField()) {
				out.print(item.getFieldName() + ":" + item.getString());
				out.write("<br />");
			} else {
				out.print(item.getName());
				BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File("D:\\t\\" + item.getName())));
				IOUtils.copy(item.getInputStream(), bos);
				bos.flush();
				bos.close();
			}
		}
	}
	
	
Spring:
	Spring是什么？
		为什么要有Spring,为解决企业应用开发的复杂性（耦合性）；
		轻量级：从大小，消耗都是轻量级的、并且Spring是非侵入性的--基于Spring开发的应用中的对象不依赖Spring的API
		依赖注入(DI-dependecy injection、IOC)
		面向切面编程(AOP)
		
		容器：Spring是一个容器，因为它包含并且管理应用对象的生命周期
	
	
	Spring功能：
		面向接口的编程，
		目的：创建对象并组装对象之间的关系；
		基础jar(core,bean,context,spel)
				AOP,
				
		ApplicationContextWare实现接口，它可以
	
		BeanNameGenerator，beanName的命名策略；需要无参构造方法；
	
	HelloWorld:
		采用ApplicationContext获取getBean
		Bean需要有构造方法及容器的set方法；这样可以知道Spring的调用顺序；
		
		
	IOC,DI：其思想是反转资源获取的方向。
		容器主动地将资源送给它所管理的组件，组件做需要做的仅是选择一种合适的方式来接收；
		DI与IOC是一样的，只是另一种表达方式。依赖注入
	
	IOC的前生---分离接口与实现（生成HTML或PDF格式的不同报表）
				工厂模式
				
	属性值注入：如果有特殊字符,需要用到<![CDATA[VALUE]]>
	
	注入,手动注入，自动注入（根据名称byName，类型byType，构造函数constructor）
	
	PropertyPlaceholderConfigurer，导入外部配置文件,可以用context空间里面的一个标签；
	
	SPel表达式：#{...};可以调用静态方法#{T(java.lang.Integer).MAX};也可以调用变量中的属性，方法等
	
	bean的生命周期：有一个所有Bean的后置处理类,BeanPostProcessor,有两个方法,前置方法，后置方法
		1.构造函数，HelloWorld.HelloWorld()
		2.setter，HelloWorld.setName()
		3.前置方法，MyBeanPostProcessor.postProcessBeforeInitialization(HelloWorld [name=jiege, desc=woshigehaoren],helloWorld)
		4.初始化方法，HelloWorld.init_method()
		5.后置方法,MyBeanPostProcessor.postProcessAfterInitialization(HelloWorld [name=jiege, desc=woshigehaoren],helloWorld)
		6.销毁,HelloWorld.destory()
		
Spring,注解
	组件扫描
		<context:component-scan base-package="com.loujie.www.annocation"
		annotation-config="true" />
		如果扫描多个的话，用逗号(,)隔开
		
		
		
Mybatis框架：
	以下是流程：
		1.SqlMapConfig.xml,mybatis全局的配置文件
			配置数据源、事物等mybatis的运行环境
		2.配置多个mapper.xml，它是映射关系
		
		3.SqlSessionFactory(会话工厂),根据配置文件创建
			作用：创建SqlSession
		
		4.SqlSession(会话)，是一个接口
			作用：操作数据库（发出sql增加，删除，修改，查询）
		
		5.Exector(执行器)，是一个接口（两个实现，基本执行器、缓存执行器）
			作用：SqlSession内部通过执行器操作数据库
			
		6.mappedstatement(底层封装对象)
			作用：对操作数据库存储封装，包括SQL，输入，参数，输出
		
		7.操作mysql
	
	
	
	
Spring-MVC框架:
	1.什么事SpringMVC?
		访问：User--->Controller--->Model---->View---->User--->...
		具体：
		User---
			(request,)-
			(前端控制器，DispatcherServlet)-
			(请求HandlerMapping,通过它找到Handler)-
			(请求查找Handler,
				返回一个HandlerExecutionChain(HandlerInterecptor1,HandlerInterceptor2,Handler),
				这里面会执行拦截器；
				当然最主要的还是Handler，
				然后会有一个Handler适配器,HandlerAdapter，它是为了执行Handler的
			)-
		-->Controller
		-->Model
			-(ModelAndView，模型与视图的结合体)-
			-视图渲染（试图解析器：ViewResolver）
		-->View（jsp,freemarker,excel,doc等）
		
	2.SpringMVC中的组件：
		1.前端控制器：DispatcherServlet
			作用是接收请求，响应结果，相当于一个转发器
		2.处理器映射器HandlerMapping
			作用是根据请求的url查找到Handler
		3.处理器适配器：HandlerAdapter
			作用是按照特定的规则(HandlerAdapter的规则)去执行Handler
		4.试图解析器（View Resolver）
			作用是进行视图解析，根据逻辑视图名解析成真正的视图(view)
		5.视图，View(Jsp,pdf,freemarker,等)
			View是一个接口，实现类支持jsp,pdf,等
			
	3.配置web.xml配置文件，
		<!-- The front controller of this Spring Web application, responsible for handling all application requests -->
		<servlet>
			<servlet-name>springDispatcherServlet</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>classpath:xml-spring-mvc.xml</param-value>
			</init-param>
			<load-on-startup>1</load-on-startup>
		</servlet>

		<!-- Map all requests to the DispatcherServlet for handling -->
		<servlet-mapping>
			<servlet-name>springDispatcherServlet</servlet-name>
			<!-- 
				第一种：*.action,过滤以.action结尾的url地址
				第二种:/,过滤所有的url,但不包括jsp页面;因此要对一些静态资源(如:js,css,等)进行例外
				第三种:/*,这种是错误的配置，因为他会过滤jsp文件；会形成死循环
			 -->
			<url-pattern>/</url-pattern>
		</servlet-mapping>
			
		
	4.xml-spring-mvc.xml配置文件中，需要配置如下东西：
		
		4.1映射处理器：HandlerMapping,它是查找Handler		
			<bean
			class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>
		4.2处理器适配器,HandlerAdapter,它是执行处理器了；不过看了源代码,所有的Handler必须实现Controller接口
			<bean
			class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>		
		4.3视图解析器,ViewResolver,它是解析ModelAndView
			<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver"></bean>
		4.4配置处理器Handler,他需要实现Controller接口
			<bean class="com.loujie.web.controller.HelloWorldController" name="/helloworld.action"></bean>
		
	5.anno-spring-mvc.xml，使用注解的配置文件：
		它同样需要配置上述的东西，
		5.1映射处理器：HandlerMapping,它是查找Handler，它在3.1之后使用的
			<bean
			class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
		5.2处理器适配器,HandlerAdapter,它是执行处理器了
			<bean
			class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>
		5.3视图解析器,ViewResolver,它是解析ModelAndView
			<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver"></bean>
		5.4
		
		同时也可以使用简便的方式设置映射处理器，处理器适配器
		<mvc:annotation-driven></mvc:annotation-driven>
		同时该标签，还加载了很多的其它配置，开发的时候用这个
	
	6.源码分析：
		6.1.找到DispatcherServlet---doDispatcher(...)方法；
	    6.2.
	
	
	
	
	
	
easyui:
	1.下载相关文件
		1.1引入jquery.js文件
		1.2引入jquery.easyui.js文件，同时也引入lang-zh_CN.js文件
		1.3引入样式jquery.css及icon.css文件
		
	2.easyui存在2种加载方式
		2.1使用class的加载方式
		2.2使用js的加载方式
		
	3.$.parser,easyui的界面渲染器
		3.1$.parser.auto=false;#关闭自动渲染
		3.2$.parser.parse();#渲染页面上所有的easyui组件
		3.3$.parser.parse("#dia1");#渲染id=dia1的easyui组件【注意:不能直接渲染组件，该组件需要定义parent，才可以】
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	