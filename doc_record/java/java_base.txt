软件：即一系列按照特定顺序组织的计算机数据和指令的集合。

java基础目录:
	1.语言基础：
	2.面向对象：
	3.基础工具：
	4.容器类：
	5.高级应用：
	
1.java语言的特点：
	1）面向对象编程
	3）跨平台，一次编译，多平台运行
	2）垃圾回收机制
	4）支持多线程
	5）没有复杂的指针操作；采用了简单的引用类型来描述内存的操作
	
java技术体系平台版本：
javaSE(java standard edition)标准版
	支持面向桌面级应用的java平台，提供了完整的java核心API,
javaEE(java enterprise edition)企业版，目前主要用的这个
	为开发企业环境下的应用，提供了Servlet,Jsp等，主要是针对web应用开发的
javaME(java Micro edition)小型版
	手机，pda上的平台支持
java Card
	支持一些java小程序（applets）运行在小内存设备上的
	
2.JDK的安装及配置
	JRE-java运行环境，它包含了jvm(java virtual machina)和java核心类库
	JDK-java开发工具包，它包含了java运行环境、java开发工具（java,javac,javadoc）和核心类库
	
CLASSPATH:
	java执行时找.class文件时，需要加载的路径
注释：
	//，单行注释
	/*  */，多行注释
	/** */，文档注释，可以用javadoc生成到文档中

关键字与标识符、变量：
	java有两个未用到的关键字:goto,const;
	java有三个特殊含义的标记:true,false,null;
	JDK1.4之后增加了assert关键字；
	JDK1.5之后增加了enum关键字;
	为什么会有变量：它作为内存地址对外部的一个映射（变量就是数据存储空间的表示），
					因为内存地址不好记录，这导致我们无法操作，但是如果有一个变量代表了它们，我们的操作就简单了。
	变量名称的定义：
		字符，数字，下划线，$，中文；不可以以数字开头
	
3.java的基本数据类型(不牵扯到内存分配问题):
	数值型--整型:默认0，默认都是int类型
		long,int(4),short,byte
	数值型--浮点型:默认0.0，默认的都是double类型的
		float,double
	字符型:默认'\u0000'
		char
		一个字符==2个字节；
		UNICODE编码；
	布尔型:默认false
		boolean
		
	在计算机中运算的都是补码，
		源码、反码、补码。
		对于正数，三码合一，意味着它们都一样的。
		正数：13，开头0
			源码：0000 1101
		负数：-13，开头1
			源码：1000 1101
			反码：1111 0010[除符号位其它取反]
			补码：1111 0011[反码+1]
	
引用数据类型:默认null
	array[]数组,
	class类,
	interface接口，
	null空类型，
	
	数组（属于引用类型）：多个相同数据类型数据的组合，实现了统一的管理
	一旦初始化长度，就不可改变了；
	
String,
	字符串==多一个字符组成的数组
	大小字符相差32;	
	
4.运算符,
	位运算：&，|，<<，>>，~，^
	&,与运算：只有对应的两个二进制均为1时，结果才为1，否则为0；
	|,或运算：只要对应的两个二进制有一个为1时，结果就为1，否则为0；
	^,异或运算：当两个对应的二进制相异的时候，结果为1
	~,非运算符：其功能是对参与运算的数的各二进制位按位求反
	<<,左移：二进制往左移位，右边补0
	>>,右移：往右移位，正数左边补0，负数补1
	>>>,无符号右移：左边补0
	(boolean)?(_):(_);

5.语句控制
	顺序，
		if(){}else if(){} else(){}
	循环，
		do{}while();while(){};for();
	分支:
		switch(key){case :break;};
	
6.方法的定义
	方法的重载,(reload)
		同一个方法名称，但是参数类型或个数不一致；
	递归调用
		循环体，
		结束体
		
7.面向对象（核心）
	面向对象，面向过程
	面向对象的是一种变成思想，这样叫也是相对于面向过程的；
	不过严格的来说，面向过程主要强调的是行为，而面向对象强调的是对象，对象可以有一系列的行为

	封装，保护内部结构的安全性
	继承， 在已有的程序结构上继续扩展新的功能
	多态：在指定一个概念范围内的满足
	
	类，它是整体事物的一个一个统称；对象，针对的是某一类事物的称呼。
	类，
		成员变量（属性:Field），
		构造方法，
		方法(Method)
	接口，
	抽象类，
	内部类，
	final,static
	
	内存分析:
		堆内存（heap）：保存每一个对象的属性内容，堆内存需要用关键字new才可以获取分配内存空间(动态分配的)
			代码块内存,它是堆内存的一部分；
			
		栈内存（stack）：一些临时变量、基本数据类型、对象声明的引用。
		
		方法区：类的信息、静态变量、常量、字符串常量
		
		静态域：静态变量
	
	String,
	
	
	Wrapper,包装类
	
8.数组
	数组的操作:
		1.数组拷贝
			System.arraycopy();
		2.数组排序
			Arrays.sort(arr);
			
	
	String,
		很多语言当中，都没有提供字符串的概念，很多的语言中都是使用字符数组来描述的概念。
		字符串其实就是一个匿名对象；它是系统封装的
		两种实例化方式:
			直接赋值，
			构造方法赋值；
		两种实例化方式的区别：
			直接赋值==将匿名的字符串对象取了一个名字；
				在堆内存中开辟一块空间存放它（匿名字符串对象）；
				String stra = "abc";
				String strb = "abc";
				String strc = "abc";
				System.err.println(stra==strb);//true
				System.err.println(stra==strc);//true
				System.err.println(strc==strb);//true
		字符串的比较：
			只要用到了new，都会被分配空间的
			String stra = "abc";
			String strb = new String(stra);
			String strc = strb;
			System.err.println(stra == strb);// false
			System.err.println(strb == strc);// true
			System.err.println(stra == strc);// false
		字符串常量一旦定义，就不可改变了；
		字符串的拆分:
		
this关键字，

final:为什么要有这个关键字？
	继承关系最大弊端是破坏了封装：子类能访问父类的实现细节，而且可以通过方法覆盖的形式实现修改细节
	
	final修饰的对象，只能设置一次地址，但地址中的内容还是可以变化的
	
包装类：
	为什么要有包装类？
		在java中,一切皆对象，但是基本数据类型，并不是对象
		基本数据类型不能为空，

构造块：
	在构造方法之前执行；new时，每次都执行；
静态块；
	
内部类：

(interface)：
	什么是接口：它本身是由n个方法组成的特征集合；
				代表了一种规范/约束/要求实现者必须要遵循该规范。
	由多个抽象类抽象出来的类,就是接口
	java中最小的程序单元是class，接口其实是一个特殊的抽象类
	接口中定义了一组抽象方法
	在接口编译过后会变成:
	public abstract interface Atest{
		public static final String IP = "192.168.0.123";
		public abstract void test();
		public abstract int count();
	}
	
	interface中，只有
				方法、
				公共静态常量（public static final 可以省略的，在编译过后,会自动加上去的）、
				公共静态内部类
			没有构造函数,不可以被new
	
Enum,枚举：
	是一个特殊的类,是多个固定常量的集合
	枚举是未解决语意不明确，数据类型不安全问题
	
	枚举的特点：
		1.枚举的直接父类是java.lang.Enum,但是并不能显示的继承Enum,这个是底层默认就可以了，外部不能这样写
		2.枚举的构造函数都是private的
		3.枚举的成员是固定的
		4.枚举不可以被new
		
		
	
	


异常：Throwable
Throwable
	Error
	Exception
		编译时异常
		运行时异常
	
	
总体上有两大类异常：
Error,这个是Jvm的一些异常，一般情况下我们是无法处理的，例如内存溢出、内存报错等
Exception，这个异常，我们是可以处理的，并且一般情况下，我们处理的都是这些


集合：主要是分为两大类，
	Collection:
		Set,元素无序、不可重复
		List,元素有序、可重复
	Map，映射关系"key--value对"的集合
		HashMap
		Hashtable
		TreeMap
		
	152
9.链表
	单项链表，
		保存自己的数据
		下一个节点的引用
		
		通过分析：
			用户操作过程中，根本不关系Node节点；
			Node节点的关系，不应该由用户来维护；
			class Link {
				private Node root;// 根节点
				private Node last;// 最终节点
				/**
				 * 向链表中增加数据
				 * 
				 * @param data
				 * @return
				 */
				public boolean addData(String data) {
					Node tempNode = new Node(data);
					if (root == null) {
						root = tempNode;
						last = root;
						return true;
					}
					// 向链表中插入数据
					return setNext(tempNode);
				}

				/**
				 * 递归向最后一个节点设置数据
				 * 
				 * @param currentNode
				 * @param nextNode
				 * @return
				 */
				private synchronized boolean setNext(Node nextNode) {
					last.setNext(nextNode);
					last = nextNode;
					return true;
				}

				/**
				 * 输出链表数据
				 */
				public void printLink() {
					printFor(root);
				}

				private void printFor(Node currentNode) {
					if (currentNode == null) {
						return;
					}
					System.err.println(currentNode.getData());
					printFor(currentNode.getNext());
				}

				/**
				 * 节点
				 * 
				 * @author loujie
				 *
				 */
				class Node {
					private Object data;// 保存的数据

					private Node next;// 下一个节点

					public Node(Object data) {
						this.data = data;
					}

					public Object getData() {
						return this.data;
					}

					public Node getNext() {
						return this.next;
					}

					public void setNext(Node next) {
						this.next = next;
					}

					public void addNode(Node next) {
						if (this.next == null) {
							this.next = next;
						} else {
							this.next.addNode(next);
						}
					}
					
					public void removeNode(Node preNode,Object data){
						
					}
				}
			}
	
	
		
	双向链表，
		保存自己的数据
		下一个节点的引用
		上一个节点的引用
		
		
10.继承，
	
	
	
11.文件操作:
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
java反射:一般都是来写框架了
	common-beanutils.jar;
	反射就是 加载类，并解剖出类的组成部分(构造还输，成员变量，方法)
	
	属性描述器:BeanInfo,PropertyDescriptor(它是通过getter,setter获取的);
		BeanInfo beanInfo = Introspector.getBeanInfo(Dog.class);
		PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();

		for (PropertyDescriptor pd : pds) {
			System.err.println(pd.getName());
		}
		
		可以使用PropertyDescriptor来操作这些属性；
	
泛型:Generic

Xml（Extensible Markup Language）语言（可扩展标记语言）:
	解析:dom(官方的),sax(xml社区)两种方式
		采用dom的话,会将xml都加载到内存中，变成一个Document对象
			但是dom对文档的crud比较方便
		sax:它是从上向下读取，适合读取（消耗内存不大）；不适合做crud
		
		Jaxp(sun),Jdom,dom4j
		
JVM虚拟机内存调整设置:
	默认最大是64M的内存；修改参数配置-Xmxn
	OutOfMemoryError:Java heap space;
	
非对称加密RSA:
	数字证书，
	数字签名：
	
	keytool -genkey -alias tomcat -keyalg RSA
	
	
Http协议:
	客户端连接上了web服务器后，若想获取服务器中的某个web资源，
	就需要遵守一定的通讯格式，http协议用于定义客户端与web服务器通讯的格式；
	
	
	
	
	
java多线程:
	
	线程同步，安全问题
	
	并行与并发:
	并行：指两个或多个事件在同一时刻点发生；
	并发：指两个或多个事件在同一时间段内发生；
	
	多线程的优势：
		1.多任务
		
	线程不安全：
		因为涉及了同时访问同一个资源的情况，
	同步方法及代码块
	也可以用Lock,Lock更强大比同步方法及同步代码块：
		
	